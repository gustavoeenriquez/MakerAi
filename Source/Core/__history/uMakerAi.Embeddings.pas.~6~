// IT License
//
// Copyright (c) <year> <copyright holders>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// o use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// HE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
// Nombre: Gustavo Enríquez
// Redes Sociales:
// - Email: gustavoeenriquez@gmail.com
// - Telegram: +57 3128441700
// - LinkedIn: https://www.linkedin.com/in/gustavo-enriquez-3937654a/
// - Youtube: https://www.youtube.com/@cimamaker3945
// - GitHub: https://github.com/gustavoeenriquez/

unit uMakerAi.Embeddings;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes,
  System.Threading, System.NetConsts,
  System.Variants, System.Net.Mime, System.IOUtils, System.Generics.Collections,
  System.NetEncoding,
  System.JSON, System.StrUtils, System.Net.URLClient, System.Net.HttpClient,
  System.Net.HttpClientComponent,
  REST.JSON, REST.Types, REST.Client,
  uMakerAi.Embeddings.core;

type
  // Por compatibilidad, mantenemos el nombre, pero ahora hereda de la clase base.
  TAiEmbeddings = class(TAiEmbeddingsCore)
  private
    FApiKey: String;
    FUrl: String;
    procedure SetApiKey(const Value: String);
    function GetApiKey: String;
    procedure SetUrl(const Value: String);
  protected
    // Este método es ahora 'override' para proporcionar la implementación específica.
    function CreateEmbedding(aInput, aUser: String; aDimensions: Integer = -1;
      aModel: String = ''; aEncodingFormat: String = 'float'): Core.TAiEmbeddingData; override;
  public
    constructor Create(aOwner: TComponent); override;
    // Este método es específico de la implementación de OpenAI
    procedure ParseEmbedding(JObj: TJsonObject);
  published
    // Propiedades específicas de esta implementación
    property ApiKey: String read GetApiKey write SetApiKey;
    property Url: String read FUrl write SetUrl;
  end;

implementation

const
  GlOpenAIUrl = 'https://api.openai.com/v1/';

{ TAiEmbeddings }

constructor TAiEmbeddings.Create(aOwner: TComponent);
begin
  inherited; // Llama al constructor de Core.TAiEmbeddings
  // Establece los valores por defecto específicos para OpenAI
  Url := GlOpenAIUrl;
  FModel := 'text-embedding-3-small';
  // Nota: FDimensions ya se inicializa en el constructor base
end;

procedure TAiEmbeddings.ParseEmbedding(JObj: TJsonObject);
var
  JArr, jData: TJsonArray;
  Emb: Core.TAiEmbeddingData;
  JVal: TJsonValue;
  J: Integer;
  Usage: TJsonObject;
begin
  JObj.TryGetValue<String>('model', FModel);

  if JObj.TryGetValue<TJsonObject>('usage', Usage) then
  begin
    Usage.TryGetValue<Integer>('prompt_tokens', Fprompt_tokens);
    Usage.TryGetValue<Integer>('total_tokens', Ftotal_tokens);
  end;

  jData := JObj.GetValue<TJsonArray>('data');

  // Solo procesamos el primer resultado del array 'data'
  if jData.Count > 0 then
  begin
    JArr := TJsonObject(jData.Items[0]).GetValue<TJsonArray>('embedding');
    SetLength(Emb, JArr.Count);
    for J := 0 to JArr.Count - 1 do
      Emb[J] := JArr.Items[J].GetValue<Double>;
    Self.FData := Emb; // Asignamos el resultado a la propiedad Data
  end
  else
    SetLength(Self.FData, 0); // Si no hay datos, vaciamos el embedding
end;

function TAiEmbeddings.CreateEmbedding(aInput, aUser: String; aDimensions: Integer;
  aModel, aEncodingFormat: String): Core.TAiEmbeddingData;
var
  Client: TNetHTTPClient;
  Headers: TNetHeaders;
  JObj: TJsonObject;
  Res: IHTTPResponse;
  St: TStringStream;
  sUrl: String;
  LModel: string;
  LDimensions: integer;
begin
  // Si hay un evento asignado en esta clase, se le da prioridad (comportamiento base)
  if Assigned(OnGetEmbedding) then
  begin
    Result := inherited CreateEmbedding(aInput, aUser, aDimensions, aModel, aEncodingFormat);
    Exit;
  end;

  // Lógica de conexión a la API de OpenAI
  Client := TNetHTTPClient.Create(nil);
  St := TStringStream.Create('', TEncoding.UTF8);
  sUrl := FUrl + 'embeddings';
  JObj := TJsonObject.Create;
  try
    LModel := if aModel = '' then Self.FModel else aModel;
    LDimensions := if aDimensions <= 0 then Self.FDimensions else aDimensions;

    JObj.AddPair('input', aInput);
    JObj.AddPair('model', LModel);
    if aUser <> '' then JObj.AddPair('user', aUser);
    if LDimensions > 0 then JObj.AddPair('dimensions', LDimensions);
    JObj.AddPair('encoding_format', aEncodingFormat);

    St.WriteString(JObj.ToString);
    St.Position := 0;

    Headers := [TNetHeader.Create('Authorization', 'Bearer ' + GetApiKey)];
    Client.ContentType := 'application/json';

    Res := Client.Post(sUrl, St, nil, Headers);

    if Res.StatusCode = 200 then
    begin
      JObj.Clear;
      JObj.AddPairs(TJsonObject.ParseJSONValue(Res.ContentAsString) as TJsonObject);
      ParseEmbedding(JObj);
      Result := Self.FData;
    end
    else
    begin
      raise Exception.CreateFmt('Error Received: %d, %s', [Res.StatusCode, Res.ContentAsString]);
    end;
  finally
    Client.Free;
    St.Free;
    JObj.Free;
  end;
end;

function TAiEmbeddings.GetApiKey: String;
begin
  if (csDesigning in ComponentState) or (csDestroying in ComponentState) then
  begin
    Result := FApiKey;
    Exit;
  end;
  if (FApiKey <> '') and (FApiKey.StartsWith('@')) then
    Result := GetEnvironmentVariable(Copy(FApiKey, 2, Length(FApiKey)))
  else
    Result := FApiKey;
end;

procedure TAiEmbeddings.SetApiKey(const Value: String);
begin
  FApiKey := Value;
end;

procedure TAiEmbeddings.SetUrl(const Value: String);
begin
  if Value <> '' then
    FUrl := Value
  else
    FUrl := GlOpenAIUrl;
end;

end.
